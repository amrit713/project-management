// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  workspaces    Workspace[]
  members       Member[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Project   Project[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Workspace {
  id         String  @id @default(uuid())
  name       String
  imageUrl   String?
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviteCode String  @unique

  members  Member[]
  projects Project[]
  tasks    Task[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]

  @@unique([userId, name])
}

enum MemberRole {
  ADMIN
  MEMBER
}

model Member {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  role  MemberRole
  tasks Task[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
}

model Project {
  id          String  @id @default(uuid())
  name        String
  imageUrl    String?
  workspaceId String

  owner_id  String
  owner     User      @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Task         Task[]
  Notification Notification[]

  @@unique([workspaceId, name])
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id   String @id @default(uuid())
  name String

  description   String?
  dueDate       DateTime
  status        TaskStatus
  position      Int //minx:1000, max: 1000000
  priority      TaskPriority @default(LOW)
  summary       String? //AI_generated summary
  suggestedDate DateTime? // AI -predicted due date

  assigneeId String
  assignee   Member @relation(fields: [assigneeId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  COMMENT
  MENTION
  SYSTEM
}

model Notification {
  id          String           @id @default(uuid())
  type        NotificationType @default(TASK_ASSIGNED)
  content     String
  read        Boolean
  //TODO: need to add workspaceId
  projectId   String
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  memberId    String
  member      Member           @relation(fields: [memberId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
